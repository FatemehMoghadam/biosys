# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-06-09 05:25
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('main', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BasalBitterlichObservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('basal_area', models.IntegerField(blank=True, null=True, verbose_name='Basal Area')),
                ('bitterlich_trees', models.IntegerField(blank=True, null=True, verbose_name='Bitterlich (trees)')),
                ('bitterlich_shrubs', models.IntegerField(blank=True, null=True, verbose_name='Bitterlich (shrubs)')),
            ],
        ),
        migrations.CreateModel(
            name='BiodiversityIndicator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comments', models.TextField(blank=True, verbose_name='Comments')),
            ],
        ),
        migrations.CreateModel(
            name='BiodiversityIndicatorLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CattleDungLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CattleSightedLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConditionLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DisturbanceIndicator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recently_burned_percent', models.FloatField(blank=True, default=0, null=True, verbose_name='Recently Burned Veg in %')),
                ('scorch_height', models.FloatField(blank=True, default=0, null=True, verbose_name='Scorch Height m')),
                ('signs_damage_percent', models.FloatField(blank=True, default=0, null=True, verbose_name='Veg affected within Site %')),
                ('weed_percent', models.FloatField(blank=True, default=0, null=True, verbose_name='Veg consisting of Weeds in %')),
                ('comments', models.TextField(blank=True, verbose_name='Comments')),
            ],
        ),
        migrations.CreateModel(
            name='ErosionPeg',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('peg_ID', models.CharField(default='A', max_length=20, verbose_name='Peg ID')),
                ('transect_x', models.FloatField(verbose_name='at ... m on transect')),
                ('transect_y', models.FloatField(verbose_name='walk ... m')),
                ('y_direction', models.CharField(blank=True, choices=[('', ''), ('left', 'Left'), ('right', 'Right')], default='', max_length=10, null=True, verbose_name='to the')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EvidenceRecentFireLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FeralEvidenceLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FireIntensityLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GrazingLevelLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GroundCoverSummary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('perennial_grass', models.FloatField(blank=True, null=True, verbose_name='Perennial Grass %')),
                ('annual_grass', models.FloatField(blank=True, null=True, verbose_name='Annual Grass %')),
                ('herb', models.FloatField(blank=True, null=True, verbose_name='Herb %')),
                ('litter', models.FloatField(blank=True, null=True, verbose_name='Litter %')),
                ('logs', models.FloatField(blank=True, null=True, verbose_name='Logs (>50mm) %')),
                ('rock_gravel', models.FloatField(blank=True, null=True, verbose_name='Exposed Rock and Gravel %')),
                ('bare_ground', models.FloatField(blank=True, null=True, verbose_name='Bare Ground %')),
                ('termite_mound', models.FloatField(blank=True, null=True, verbose_name='Termite Mound %')),
                ('comments', models.TextField(blank=True, verbose_name='Comments')),
            ],
            options={
                'verbose_name_plural': 'ground cover summaries',
            },
        ),
        migrations.CreateModel(
            name='PegObservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('peg_ID', models.CharField(blank=True, default='A', max_length=20, null=True, verbose_name='Peg ID')),
                ('intact_litter', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Intact Litter (mm)')),
                ('frag_decay', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Fragm. and decaying')),
                ('crust', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Crust')),
                ('worm', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Worm cast layer')),
                ('organic', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Organic mineral layer')),
                ('erosion', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Erosion peg')),
                ('comments', models.CharField(blank=True, max_length=500, verbose_name='Comments')),
            ],
        ),
        migrations.CreateModel(
            name='PlantObservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('introduced', models.BooleanField(default=False, verbose_name='Introduced')),
                ('extent', models.CharField(blank=True, max_length=200, verbose_name='Extent of Infestation')),
                ('density', models.CharField(blank=True, max_length=50, verbose_name='Density')),
                ('invasiveness', models.CharField(blank=True, max_length=50, verbose_name='Invasiveness')),
                ('species', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.OldSpeciesObservation', verbose_name='Species')),
            ],
        ),
        migrations.CreateModel(
            name='SignificanceLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StratumLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StratumSpecies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collector_no', models.CharField(blank=True, max_length=200, verbose_name='Collector No')),
                ('avg_height', models.FloatField(blank=True, null=True, verbose_name='Average Height (m)')),
                ('cover', models.FloatField(blank=True, null=True, verbose_name='Cover %')),
                ('basal_area', models.FloatField(blank=True, null=True, verbose_name='Basal Area')),
                ('bitterlich_cover', models.FloatField(blank=True, null=True, verbose_name='Bitterlich % cover')),
                ('juv_lt_2m', models.BooleanField(default=False, verbose_name='Juvenile <2m')),
                ('juv_mt_2m', models.BooleanField(default=False, verbose_name='Juvenile >2m')),
                ('adult', models.BooleanField(default=False, verbose_name='Adult')),
                ('mature', models.BooleanField(default=False, verbose_name='Mature (at peak of prod.)')),
                ('flowering', models.BooleanField(default=False, verbose_name='Flowering')),
                ('fruiting', models.BooleanField(default=False, verbose_name='Fruiting')),
                ('seeding', models.BooleanField(default=False, verbose_name='Seeding')),
                ('comments', models.TextField(blank=True, verbose_name='Comments')),
                ('condition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='vegetation.ConditionLookup')),
                ('significance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='vegetation.SignificanceLookup', verbose_name='Significance')),
                ('species', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.OldSpeciesObservation', verbose_name='Species')),
                ('stratum', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vegetation.StratumLookup', verbose_name='Stratum')),
            ],
            options={
                'verbose_name_plural': 'stratum species',
            },
        ),
        migrations.CreateModel(
            name='StratumSummary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('growth_form', models.CharField(max_length=100, verbose_name='Growth Form')),
                ('crown_cover', models.FloatField(verbose_name='% Cover (Crown Cover)')),
                ('avg_height', models.FloatField(verbose_name='Average Height (m)')),
                ('max_height', models.FloatField(verbose_name='Maximum Height (m)')),
                ('stratum', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vegetation.StratumLookup', verbose_name='Stratum')),
            ],
            options={
                'verbose_name_plural': 'stratum summaries',
            },
        ),
        migrations.CreateModel(
            name='TracksTramplingLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TransectDistinctChanges',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('point_of_change', models.FloatField(blank=True, null=True, verbose_name='Point of Change (m.cm)')),
                ('change_from', models.CharField(blank=True, max_length=150, verbose_name='Change from')),
                ('change_to', models.CharField(blank=True, max_length=150, verbose_name='Change to')),
            ],
            options={
                'verbose_name_plural': 'transect distinct changes',
            },
        ),
        migrations.CreateModel(
            name='TransectObservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('perennial_grass', models.FloatField(blank=True, null=True, verbose_name='Perennial Grass %')),
                ('annual_grass', models.FloatField(blank=True, null=True, verbose_name='Annual Grass %')),
                ('herb', models.FloatField(blank=True, null=True, verbose_name='Herb %')),
                ('litter', models.FloatField(blank=True, null=True, verbose_name='Litter %')),
                ('logs', models.FloatField(blank=True, null=True, verbose_name='Logs (>50mm) %')),
                ('rock_gravel', models.FloatField(blank=True, null=True, verbose_name='Exposed Rock and Gravel %')),
                ('bare_ground', models.FloatField(blank=True, null=True, verbose_name='Bare Ground %')),
                ('termite_mound', models.FloatField(blank=True, null=True, verbose_name='Termite Mound %')),
                ('low_shrub', models.FloatField(blank=True, null=True, verbose_name='Woody Subshrub %')),
                ('shrub', models.FloatField(blank=True, null=True, verbose_name='Shrub %')),
                ('tree', models.FloatField(blank=True, null=True, verbose_name='Tree %')),
            ],
        ),
        migrations.CreateModel(
            name='VegetationVisit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collector', models.CharField(blank=True, max_length=150, verbose_name='Vegetation collector')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Visit Date')),
                ('site_visit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.SiteVisit', verbose_name='Site Visit')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='transectobservation',
            name='vegetation_visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vegetation.VegetationVisit', verbose_name='Vegetation Visit'),
        ),
        migrations.AddField(
            model_name='transectdistinctchanges',
            name='vegetation_visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vegetation.VegetationVisit', verbose_name='Vegetation Visit'),
        ),
        migrations.AddField(
            model_name='stratumsummary',
            name='vegetation_visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vegetation.VegetationVisit', verbose_name='Vegetation Visit'),
        ),
        migrations.AddField(
            model_name='stratumspecies',
            name='vegetation_visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vegetation.VegetationVisit', verbose_name='Vegetation Visit'),
        ),
        migrations.AddField(
            model_name='plantobservation',
            name='vegetation_visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vegetation.VegetationVisit', verbose_name='Vegetation Visit'),
        ),
        migrations.AddField(
            model_name='pegobservation',
            name='vegetation_visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vegetation.VegetationVisit', verbose_name='Vegetation Visit'),
        ),
        migrations.AddField(
            model_name='groundcoversummary',
            name='vegetation_visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vegetation.VegetationVisit', verbose_name='Vegetation Visit'),
        ),
        migrations.AddField(
            model_name='erosionpeg',
            name='vegetation_visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vegetation.VegetationVisit', verbose_name='Vegetation Visit'),
        ),
        migrations.AddField(
            model_name='disturbanceindicator',
            name='camels',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='camels_evidence', to='vegetation.FeralEvidenceLookup', verbose_name='Camels'),
        ),
        migrations.AddField(
            model_name='disturbanceindicator',
            name='cats',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='cats_evidence', to='vegetation.FeralEvidenceLookup', verbose_name='Cats'),
        ),
        migrations.AddField(
            model_name='disturbanceindicator',
            name='cattle_dung',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='vegetation.CattleDungLookup', verbose_name='Cattle Dung'),
        ),
        migrations.AddField(
            model_name='disturbanceindicator',
            name='cattle_sighted',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='vegetation.CattleSightedLookup', verbose_name='Cattle sighted'),
        ),
        migrations.AddField(
            model_name='disturbanceindicator',
            name='evidence_recent_fire',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='vegetation.EvidenceRecentFireLookup', verbose_name='Evidence of recent Fire'),
        ),
        migrations.AddField(
            model_name='disturbanceindicator',
            name='fire_intensity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='vegetation.FireIntensityLookup', verbose_name='Fire Intensity'),
        ),
        migrations.AddField(
            model_name='disturbanceindicator',
            name='grazing_level',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='vegetation.GrazingLevelLookup', verbose_name='Grazing Level'),
        ),
        migrations.AddField(
            model_name='disturbanceindicator',
            name='horses_donkeys',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='horses_donkeys_evidence', to='vegetation.FeralEvidenceLookup', verbose_name='Horses/ Donkeys'),
        ),
        migrations.AddField(
            model_name='disturbanceindicator',
            name='pigs',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pigs_evidence', to='vegetation.FeralEvidenceLookup', verbose_name='Pigs'),
        ),
        migrations.AddField(
            model_name='disturbanceindicator',
            name='tracks_trampling',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='vegetation.TracksTramplingLookup', verbose_name='Tracks and Trampling'),
        ),
        migrations.AddField(
            model_name='disturbanceindicator',
            name='vegetation_visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vegetation.VegetationVisit', verbose_name='Vegetation Visit'),
        ),
        migrations.AddField(
            model_name='biodiversityindicator',
            name='crevices',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='crevices_indicator', to='vegetation.BiodiversityIndicatorLookup', verbose_name='Rock Crevices'),
        ),
        migrations.AddField(
            model_name='biodiversityindicator',
            name='fauna_habitat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='fauna_habitat_indicator', to='vegetation.BiodiversityIndicatorLookup', verbose_name='Fauna Habitat and Shelter'),
        ),
        migrations.AddField(
            model_name='biodiversityindicator',
            name='flowering',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='flowering_indicator', to='vegetation.BiodiversityIndicatorLookup', verbose_name='Flowering'),
        ),
        migrations.AddField(
            model_name='biodiversityindicator',
            name='food_avail',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='food_avail_indicator', to='vegetation.BiodiversityIndicatorLookup', verbose_name='Food Availability'),
        ),
        migrations.AddField(
            model_name='biodiversityindicator',
            name='fruiting',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='fruiting_indicator', to='vegetation.BiodiversityIndicatorLookup', verbose_name='Fruiting'),
        ),
        migrations.AddField(
            model_name='biodiversityindicator',
            name='logs',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='logs_indicator', to='vegetation.BiodiversityIndicatorLookup', verbose_name='Logs'),
        ),
        migrations.AddField(
            model_name='biodiversityindicator',
            name='others',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='others_indicator', to='vegetation.BiodiversityIndicatorLookup', verbose_name='Other Signs'),
        ),
        migrations.AddField(
            model_name='biodiversityindicator',
            name='scats',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='scats_indicator', to='vegetation.BiodiversityIndicatorLookup', verbose_name='Scats'),
        ),
        migrations.AddField(
            model_name='biodiversityindicator',
            name='seeding',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='seeding_indicator', to='vegetation.BiodiversityIndicatorLookup', verbose_name='Seeding'),
        ),
        migrations.AddField(
            model_name='biodiversityindicator',
            name='sightings',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sightings_indicator', to='vegetation.BiodiversityIndicatorLookup', verbose_name='Sightings'),
        ),
        migrations.AddField(
            model_name='biodiversityindicator',
            name='termites',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='termites_indicator', to='vegetation.BiodiversityIndicatorLookup', verbose_name='Termite Mounds'),
        ),
        migrations.AddField(
            model_name='biodiversityindicator',
            name='traces',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='traces_indicator', to='vegetation.BiodiversityIndicatorLookup', verbose_name='Tracks and Traces'),
        ),
        migrations.AddField(
            model_name='biodiversityindicator',
            name='tracks',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tracks_indicator', to='vegetation.BiodiversityIndicatorLookup', verbose_name='Tracks'),
        ),
        migrations.AddField(
            model_name='biodiversityindicator',
            name='tree_hollows',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tree_hollows_indicator', to='vegetation.BiodiversityIndicatorLookup', verbose_name='Tree Hollows'),
        ),
        migrations.AddField(
            model_name='biodiversityindicator',
            name='veg_cover',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='veg_cover_indicator', to='vegetation.BiodiversityIndicatorLookup', verbose_name='Veg Cover'),
        ),
        migrations.AddField(
            model_name='biodiversityindicator',
            name='vegetation_visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vegetation.VegetationVisit', verbose_name='Vegetation Visit'),
        ),
        migrations.AddField(
            model_name='basalbitterlichobservation',
            name='vegetation_visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vegetation.VegetationVisit', verbose_name='Vegetation Visit'),
        ),
    ]
