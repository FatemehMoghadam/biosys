# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-05-13 06:24
from __future__ import unicode_literals

import datetime
from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import main.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DataDescriptor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('type', models.CharField(choices=[('project', 'Project'), ('site', 'Site'), ('dataset', 'Dataset'), ('observation', 'Observation'), ('species_observation', 'Species observation')], default='dataset', max_length=100)),
                ('data_package', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='GeologyGroupLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GeologyLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LandformElementLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LandformPatternLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LocationLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('date_time', models.DateTimeField()),
                ('geometry', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('data_descriptor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.DataDescriptor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OldSpeciesObservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_name', models.CharField(max_length=500, verbose_name='Species')),
                ('name_id', models.IntegerField(default=-1, help_text='The unique ID from the herbarium database', verbose_name='Name ID')),
                ('validation_status', models.CharField(blank=True, choices=[('', ''), ('do not validate', 'do not validate')], default='', max_length=50, null=True, verbose_name='Species validation status')),
                ('uncertainty', models.CharField(blank=True, max_length=50, verbose_name='Species uncertainty')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter a brief title for the project (required).', max_length=300, unique=True, verbose_name='Title')),
                ('code', models.CharField(blank=True, help_text='Provide a brief code or acronym for this project. This code could be used for prefixing site codes.', max_length=30, null=True, verbose_name='Code')),
                ('custodian', models.CharField(blank=True, help_text='The person responsible for the content of this project.', max_length=100, null=True, verbose_name='Custodian')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('objectives', models.TextField(blank=True, null=True, verbose_name='Objectives')),
                ('methodology', models.TextField(blank=True, null=True, verbose_name='Methodology')),
                ('funding', models.TextField(blank=True, null=True, verbose_name='Funding')),
                ('duration', models.CharField(blank=True, help_text='The likely duration of the project.', max_length=100, null=True, verbose_name='Duration')),
                ('datum', models.IntegerField(blank=True, choices=[(4326, 'WGS84'), (4283, 'GDA94'), (4203, 'AGD84'), (4202, 'AGD66')], default=4326, help_text='The datum all locations will be assumed to have unless otherwise specified.', null=True, verbose_name='Default Datum')),
                ('extent_lat_min', models.FloatField(blank=True, help_text='The southernmost extent of the project (-90 - 0)', null=True, verbose_name='Extent latitude min')),
                ('extent_lat_max', models.FloatField(blank=True, help_text='The northernmost extent of the project (-90 - 0)', null=True, verbose_name='Extent latitude max')),
                ('extent_long_min', models.FloatField(blank=True, help_text='The westernmost extent of the project (0 - 180)', null=True, verbose_name='Extent longitude min')),
                ('extent_long_max', models.FloatField(blank=True, help_text='The easternmost extent of the project (0 - 180)', null=True, verbose_name='Extent longitude max')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Comments')),
                ('geometry', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326, verbose_name='Extent Geometry')),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('data_descriptor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='descriptors', related_query_name='descriptor', to='main.DataDescriptor')),
            ],
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_ID', models.IntegerField(default=main.models._calculate_site_ID, help_text='Site ID from Scientific Site Register.', unique=True, verbose_name='Site ID')),
                ('site_code', models.CharField(help_text='Local site code must be unique to this project. e.g. LCI123 (required)', max_length=100, verbose_name='Site Code')),
                ('site_name', models.CharField(blank=True, help_text='Enter a more descriptive name for this site, if one exists.', max_length=150, verbose_name='Site Name')),
                ('date_established', models.DateField(default=datetime.date.today, help_text='The date this site was first established (required)', verbose_name='Date established')),
                ('latitude', models.FloatField(blank=True, help_text='Latitude of site origin (e.g. corner, centroid, etc., required)', null=True)),
                ('longitude', models.FloatField(blank=True, help_text='Longitude of site origin (e.g. corner, centroid, etc., required)', null=True)),
                ('accuracy', models.FloatField(default=30.0, verbose_name='Accuracy (m)')),
                ('datum', models.IntegerField(choices=[(4326, 'WGS84'), (4283, 'GDA94'), (4203, 'AGD84'), (4202, 'AGD66')], default=4326, verbose_name='Datum')),
                ('established_by', models.CharField(blank=True, max_length=200, null=True, verbose_name='Established by')),
                ('bearing', models.FloatField(blank=True, help_text='Degrees (0 - 360)', null=True, verbose_name='Bearing')),
                ('width', models.IntegerField(blank=True, null=True, verbose_name='Width (m)')),
                ('height', models.IntegerField(blank=True, null=True, verbose_name='Height (m)')),
                ('aspect', models.CharField(blank=True, choices=[('N', 'N'), ('NNE', 'NNE'), ('NE', 'NE'), ('ENE', 'ENE'), ('E', 'E'), ('ESE', 'ESE'), ('SE', 'SE'), ('SSE', 'SSE'), ('S', 'S'), ('SSW', 'SSW'), ('SW', 'SW'), ('WSW', 'WSW'), ('W', 'W'), ('WNW', 'WNW'), ('NW', 'NW'), ('NNW', 'NNW')], help_text='Compass bearing (e.g. N, SSE)', max_length=10, null=True, verbose_name='Aspect')),
                ('slope', models.FloatField(blank=True, help_text='Degrees (0 - 90)', null=True, verbose_name='Slope')),
                ('altitude', models.FloatField(blank=True, help_text='Altitude, in metres', null=True, verbose_name='Altitude')),
                ('radius', models.FloatField(blank=True, help_text='Radius, in metres', null=True, verbose_name='Radius')),
                ('tenure', models.CharField(blank=True, max_length=50, null=True, verbose_name='Tenure')),
                ('closest_water_distance', models.IntegerField(blank=True, null=True, verbose_name='Distance to closest water (m)')),
                ('soil_colour', models.CharField(blank=True, max_length=150, verbose_name='Soil colour')),
                ('photos_taken', models.TextField(blank=True, verbose_name='Photos Taken')),
                ('historical_info', models.TextField(blank=True, null=True, verbose_name='Historical information')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Comments')),
                ('geometry', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326, verbose_name='Geometry')),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SiteCharacteristic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('closest_water_distance', models.IntegerField(blank=True, null=True, verbose_name='Distance to closest water (m)')),
                ('soil_colour', models.CharField(blank=True, max_length=150, verbose_name='Soil colour')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Comments')),
            ],
        ),
        migrations.CreateModel(
            name='SiteDataSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('data_descriptor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.DataDescriptor')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SiteVisit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_status', models.CharField(choices=[('quarantined', 'Quarantined'), ('approved', 'Approved'), ('invalid', 'Invalid')], default='quarantined', max_length=30, verbose_name='Data Status')),
            ],
        ),
        migrations.CreateModel(
            name='SiteVisitDataFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='%Y/%m/%d')),
                ('uploaded_date', models.DateTimeField(auto_now_add=True)),
                ('site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Site', verbose_name='Site')),
                ('user', models.ForeignKey(help_text='User that uploaded the file', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SiteVisitDataSheetTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='%Y/%m/%d')),
                ('uploaded_date', models.DateTimeField(auto_now_add=True)),
                ('version', models.CharField(default='1.0', max_length=50, verbose_name='Template Version')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SoilColourLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SoilSurfaceTextureLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpeciesObservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('date_time', models.DateTimeField()),
                ('geometry', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('input_name', models.CharField(max_length=500, verbose_name='Species')),
                ('name_id', models.IntegerField(default=-1, help_text='The unique ID from the herbarium database', verbose_name='Name ID')),
                ('uncertainty', models.CharField(blank=True, max_length=50, verbose_name='Species uncertainty')),
                ('data_descriptor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.DataDescriptor')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TenureLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VegetationGroupLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Visit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a unique name for this visit to the sites listed above (required)', max_length=150, verbose_name='Visit Name')),
                ('start_date', models.DateField(default=datetime.date.today, help_text='Enter the start date of the visit (required)', verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, help_text='Enter the actual end date of the visit', null=True, verbose_name='End Date')),
                ('trap_nights', models.IntegerField(blank=True, help_text='Enter the number of actual trapping nights that occurred.', null=True, verbose_name='Trap Nights')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Comments')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Project', verbose_name='Project')),
                ('sites', models.ManyToManyField(to='main.Site', verbose_name='Sites')),
            ],
        ),
        migrations.CreateModel(
            name='WaterTypeLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500, verbose_name='Value')),
                ('code', models.CharField(blank=True, max_length=10, verbose_name='Code')),
                ('deprecated', models.BooleanField(default=False, verbose_name='Deprecated')),
            ],
            options={
                'ordering': ['value'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='sitevisitdatafile',
            name='visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Visit', verbose_name='Visit'),
        ),
        migrations.AddField(
            model_name='sitevisit',
            name='data_file',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='main.SiteVisitDataFile', verbose_name='Data File'),
        ),
        migrations.AddField(
            model_name='sitevisit',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Site', verbose_name='Site'),
        ),
        migrations.AddField(
            model_name='sitevisit',
            name='visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Visit', verbose_name='Visit'),
        ),
        migrations.AddField(
            model_name='sitecharacteristic',
            name='closest_water_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='main.WaterTypeLookup', verbose_name='Type of closest water'),
        ),
        migrations.AddField(
            model_name='sitecharacteristic',
            name='landform_element',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='main.LandformElementLookup', verbose_name='Landform element (20m radius)'),
        ),
        migrations.AddField(
            model_name='sitecharacteristic',
            name='landform_pattern',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='main.LandformPatternLookup', verbose_name='Landform pattern (300m radius)'),
        ),
        migrations.AddField(
            model_name='sitecharacteristic',
            name='site_visit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.SiteVisit', verbose_name='Site Visit'),
        ),
        migrations.AddField(
            model_name='sitecharacteristic',
            name='soil_surface_texture',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='main.SoilSurfaceTextureLookup', verbose_name='Soil surface texture'),
        ),
        migrations.AddField(
            model_name='sitecharacteristic',
            name='underlaying_geology',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='main.GeologyLookup', verbose_name='Underlaying geology'),
        ),
        migrations.AddField(
            model_name='site',
            name='closest_water_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='main.WaterTypeLookup', verbose_name='Type of closest water'),
        ),
        migrations.AddField(
            model_name='site',
            name='data_descriptor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.DataDescriptor'),
        ),
        migrations.AddField(
            model_name='site',
            name='geology_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='main.GeologyGroupLookup', verbose_name='Geology group'),
        ),
        migrations.AddField(
            model_name='site',
            name='landform_element',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='main.LandformElementLookup', verbose_name='Landform element (20m radius)'),
        ),
        migrations.AddField(
            model_name='site',
            name='landform_pattern',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='main.LandformPatternLookup', verbose_name='Landform pattern (300m radius)'),
        ),
        migrations.AddField(
            model_name='site',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='main.LocationLookup', verbose_name='Location'),
        ),
        migrations.AddField(
            model_name='site',
            name='parent_site',
            field=models.ForeignKey(blank=True, help_text="Sites can be grouped together. If you have a subregion within the project that contains a number of sites, create that region as a parent site first, then select that parent when you're creating this site.", null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Site', verbose_name='Parent Site'),
        ),
        migrations.AddField(
            model_name='site',
            name='project',
            field=models.ForeignKey(help_text='Select the project this site is part of (required)', on_delete=django.db.models.deletion.CASCADE, to='main.Project', verbose_name='Project'),
        ),
        migrations.AddField(
            model_name='site',
            name='soil_surface_texture',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='main.SoilSurfaceTextureLookup', verbose_name='Soil surface texture'),
        ),
        migrations.AddField(
            model_name='site',
            name='underlaying_geology',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='main.GeologyLookup', verbose_name='Underlaying geology'),
        ),
        migrations.AddField(
            model_name='site',
            name='vegetation_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='main.VegetationGroupLookup', verbose_name='Vegetation group'),
        ),
        migrations.AddField(
            model_name='oldspeciesobservation',
            name='site_visit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.SiteVisit', verbose_name='Site Visit'),
        ),
        migrations.AddField(
            model_name='observation',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Site'),
        ),
        migrations.AddField(
            model_name='datadescriptor',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Project'),
        ),
        migrations.AlterUniqueTogether(
            name='site',
            unique_together=set([('project', 'site_code')]),
        ),
    ]
