# Generated by Django 2.1.5 on 2019-01-25 04:27

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import main.models
import timezone_field.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(blank=True, max_length=50)),
                ('type', models.CharField(choices=[('generic', 'Generic'), ('observation', 'Observation'), ('species_observation', 'Species observation')], default='generic', max_length=100)),
                ('data_package', django.contrib.postgres.fields.jsonb.JSONField()),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DatasetMedia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=main.models.get_dataset_media_path)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Dataset')),
            ],
            options={
                'verbose_name_plural': 'dataset_media',
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=main.models.get_media_path)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'media',
            },
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a name for the program (required).', max_length=300, unique=True, verbose_name='Name')),
                ('code', models.CharField(blank=True, help_text='Provide a brief code or acronym for this program.', max_length=30, null=True, verbose_name='Code')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('data_engineers', models.ManyToManyField(blank=True, help_text='Users that can create/update projects and dataset schema within this program.', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a name for the project (required).', max_length=300, unique=True, verbose_name='Name')),
                ('code', models.CharField(blank=True, help_text='Provide a brief code or acronym for this project. This code could be used for prefixing site codes.', max_length=30, null=True, verbose_name='Code')),
                ('datum', models.IntegerField(blank=True, choices=[(4326, 'WGS84'), (4283, 'GDA94'), (4203, 'AGD84'), (4202, 'AGD66'), (28348, 'GDA94 / MGA zone 48'), (28349, 'GDA94 / MGA zone 49'), (28350, 'GDA94 / MGA zone 50'), (28351, 'GDA94 / MGA zone 51'), (28352, 'GDA94 / MGA zone 52'), (28353, 'GDA94 / MGA zone 53'), (28354, 'GDA94 / MGA zone 54'), (28355, 'GDA94 / MGA zone 55'), (28356, 'GDA94 / MGA zone 56'), (28357, 'GDA94 / MGA zone 57'), (28358, 'GDA94 / MGA zone 58'), (20348, 'AGD84 / MGA zone 48'), (20349, 'AGD84 / MGA zone 49'), (20350, 'AGD84 / MGA zone 50'), (20351, 'AGD84 / MGA zone 51'), (20352, 'AGD84 / MGA zone 52'), (20353, 'AGD84 / MGA zone 53'), (20354, 'AGD84 / MGA zone 54'), (20355, 'AGD84 / MGA zone 55'), (20356, 'AGD84 / MGA zone 56'), (20357, 'AGD84 / MGA zone 57'), (20358, 'AGD84 / MGA zone 58'), (20248, 'AGD66 / MGA zone 48'), (20249, 'AGD66 / MGA zone 49'), (20250, 'AGD66 / MGA zone 50'), (20251, 'AGD66 / MGA zone 51'), (20252, 'AGD66 / MGA zone 52'), (20253, 'AGD66 / MGA zone 53'), (20254, 'AGD66 / MGA zone 54'), (20255, 'AGD66 / MGA zone 55'), (20256, 'AGD66 / MGA zone 56'), (20257, 'AGD66 / MGA zone 57'), (20258, 'AGD66 / MGA zone 58')], default=4326, help_text='The datum all locations will be assumed to have unless otherwise specified.', null=True, verbose_name='Default Datum')),
                ('timezone', timezone_field.fields.TimeZoneField(blank=True, default='Australia/Perth', help_text="The Timezone of your project e.g 'Australia/Perth.")),
                ('attributes', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text="Define here all specific attributes of your project in the form of json 'attribute name': 'attribute value", null=True)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('geometry', django.contrib.gis.db.models.fields.GeometryField(blank=True, help_text='The boundary of your project (not required). Can also be calculated from the extents of the project sites', null=True, srid=4326, verbose_name='Extent')),
                ('site_data_package', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Define here the attributes that all your sites will share. This allows validation when importing sites.', null=True, verbose_name='Site attributes schema')),
                ('custodians', models.ManyToManyField(help_text='Users that have write/upload access to the data of this project.', to=settings.AUTH_USER_MODEL)),
                ('program', models.ForeignKey(help_text='The program this project belongs to.', on_delete=django.db.models.deletion.CASCADE, to='main.Program')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProjectMedia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=main.models.get_project_media_path)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Project')),
            ],
            options={
                'verbose_name_plural': 'project_media',
            },
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('datetime', models.DateTimeField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('species_name', models.CharField(blank=True, help_text='Species Name (as imported)', max_length=500, null=True, verbose_name='Species Name')),
                ('name_id', models.IntegerField(default=-1, help_text='The unique ID from the species database', verbose_name='Name ID')),
                ('source_info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('validated', models.BooleanField(default=False)),
                ('locked', models.BooleanField(default=False)),
                ('client_id', models.CharField(blank=True, max_length=1024, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Dataset')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Enter a more descriptive name for this site, if one exists.', max_length=150, verbose_name='Name')),
                ('code', models.CharField(help_text='Local site code must be unique to this project. e.g. LCI123 (required)', max_length=100, verbose_name='Code')),
                ('geometry', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326, verbose_name='Location')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('attributes', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('project', models.ForeignKey(help_text='Select the project this site is part of (required)', on_delete=django.db.models.deletion.CASCADE, to='main.Project', verbose_name='Project')),
            ],
            options={
                'ordering': ['code'],
            },
        ),
        migrations.AddField(
            model_name='record',
            name='site',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.Site'),
        ),
        migrations.AddField(
            model_name='media',
            name='record',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Record'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', related_query_name='project', to='main.Project'),
        ),
        migrations.AlterUniqueTogether(
            name='site',
            unique_together={('project', 'code')},
        ),
        migrations.AlterUniqueTogether(
            name='dataset',
            unique_together={('project', 'name')},
        ),
    ]
